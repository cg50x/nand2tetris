// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = 0; // next
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var int currentSegment, newSegment, sizeNeeded;
        var boolean segmentFound;
        // Find an appropriate segment (first-fit)
        let segmentFound = false;
        let currentSegment = freeList;
        let sizeNeeded = size + 2; // accounts for overhead
        while (~(currentSegment = 0) & ~segmentFound) {
            if (~(currentSegment[1] < sizeNeeded)) {
                let segmentFound = true;
            } else {
                let currentSegment = currentSegment[0];
            }
        }
        if (~segmentFound) {
            return -1;
        }
        // Carve a block size from the segment
        let newSegment = currentSegment + 2 + currentSegment[1] - sizeNeeded;
        let newSegment[0] = 0;
        let newSegment[1] = size;
        let currentSegment[1] = currentSegment[1] - sizeNeeded;
        // Return the base address of the block's data part
        return newSegment + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array target) {
        var int currentSegment, targetBaseAddress;
        let targetBaseAddress = target - 2; // accounts for overhead
        // Find the end of the free list
        let currentSegment = freeList;
        while (~(currentSegment[0] = 0)) {
            let currentSegment = currentSegment[0];
        }
        // Append object to the end of the free list
        let currentSegment[0] = targetBaseAddress;
        return;
    }    
}
